### Pithy Screen Menu System for controlling Home Assistant
###
### Created by: Milan Korenica
### Licensed under GNU General Public License v3.0

esphome:
  name: ${unitName}
  platform: ${boardPlatform}
  board: ${boardName}
#set default for rotary
  on_boot:
    priority: 250
    then:
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - sensor.rotary_encoder.set_value:
          id: rotary_dial
          value: 0
      - binary_sensor.template.publish:
          id: api_connected
          state: ON
          
wifi:
  ssid: "your_ssid"
  password: "your_password"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "pithy_screen"
    password: "pithypithy"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "pithy"

ota:
  password: "pithy"

#####
#####  CONFIGURATION BLOCK HERE
#####
substitutions:
  boardPlatform: ESP8266
  boardName: d1_mini
  unitName: pithy_screen_menu_template
  
  encoderPinA: D5
  encoderPinB: D6
  encoderSwitch: D7
  i2cData: D1
  i2cClock: D2
  
  # Menu system
  menuDepth: '3'
  menuSize: '30'

#####  END OF CONFIGURATION BLOCK 

globals:
# Screensaver
   - id: ss_x
     type: signed char
     initial_value: '0'

   - id: ss_y
     type: signed char
     initial_value: '0'

   - id: ss_vx
     type: signed char
     initial_value: '1'

   - id: ss_vy
     type: signed char
     initial_value: '1'
     
   - id: wi
     type: unsigned char
     initial_value: '0'

# Menu helpers
     
   - id: menu_max_level
     type: unsigned char
     initial_value: '${menuDepth}'

   - id: menu_level
     type: unsigned char

   - id: menu_position
     type: unsigned char[${menuDepth}]

   - id: menu_parent
     type: unsigned char[${menuDepth}]

   - id: menu_current_node
     type: unsigned char

   - id: menu_current_label
     type: char *

   - id: menu_current_value
     type: float

   - id: menu_set_mode
     type: bool
     initial_value: 'false'

#####
#####  CONFIGURATION BLOCK HERE
#####

     # Set these to labels you want to display
   - id: menu_labels
     type: char * [${menuSize}]
     initial_value: '
       {
         "Saver", "Menu 1", "Menu 2",
           "1st submenu 1", "1st submenu 2",
             "Continuous", "Binary", "Action button",
             "Cont+confirm", "Display",
           "2nd submenu 1", "2nd submenu 2"
       }'

     # Set these to functions of particular menu items
   - id: menu_functions
     type: unsigned char[${menuSize}]
     initial_value: '
       {
         0, 2, 2,
           2, 2,
             3, 4, 5,
             6, 1,
           1, 1
       }'

     # For submenu items, what are the children?
   - id: menu_child
     type: unsigned char[${menuSize}]
     initial_value: '
       {
         0, 3, 10,
           5, 8,
             255, 255, 255,
             255, 255,
           255, 255
       }'

     # How many items are there for each submenu? For continuous settings, what is the range?
   - id: menu_length
     type: unsigned char[${menuSize}]
     initial_value: '
       {
         4, 2, 2,
           3, 2,
             0, 0, 0,
             0, 0,
           0, 0 
       }'

script:
# What value to display for each menu item
  - id: menu_values
    then:
      - lambda: |-
          switch(id(menu_current_node)) {
            
            // Menu 1 - 1st submenu 1 - Continuous
            case 5: id(menu_current_value) = id(ex_cont).state; break;

            // Menu 1 - 1st submenu 1 - Binary
            case 6: id(menu_current_value) = id(ex_bin).state ? 1 : 0; break;

            // Menu 1 - 1st submenu 2 - Continuous with confirmation
            case 8: id(menu_current_value) = id(menu_set_mode) ? start + id(rotary_dial).state*step : id(ex_cont_conf).state; break;

            // Menu 1 - 1st submenu 2 - Display only, can be both continuous or binary
            case 9: id(menu_current_value) = id(ex_disp).state ? 1 : 0; break;

          }

# What value to set rotary encoder to for each menu item setting
  - id: menu_set_rotary
    then:
      - lambda: |-
          switch(id(menu_current_node)) {
            
            // Menu 1 - 1st submenu 1 - Continuous
            case 5: id(rotary_dial).set_value((id(ex_cont).state - start)/step); break;

            // Menu 1 - 1st submenu 1 - Binary
            case 6: id(rotary_dial).set_value(id(ex_bin).state ? 1 : 0); break;

            // Menu 1 - 1st submenu 2 - Continuous with confirmation
            case 8: id(rotary_dial).set_value((id(ex_cont_conf).state - start)/step); break;
            
          }

# Actions for each menu item setting
  - id: menu_actions
    then:

      # Menu 1 - 1st submenu 1 - Continuous
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 5;'
          then:
            homeassistant.service:
              variables:
                x: 'return start + id(rotary_dial).state*step;'
              service: cover.set_cover_position
              data_template:
                entity_id: cover.example_cover
                position: '{{ x }}'

      # Menu 1 - 1st submenu 1 - Binary
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 6;'
          then:
            if:
              condition:
                lambda: 'return id(rotary_dial).state;'
              then:  
                homeassistant.service:
                  service: switch.turn_on
                  data:
                    entity_id: switch.example_switch
              else:
                homeassistant.service:
                  service: switch.turn_off
                  data:
                    entity_id: switch.example_switch

      # Menu 1 - 1st submenu 1 - Action button
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 7;'
          then:
            homeassistant.service:
              service: script.example_script
              data:
                example: data

      # Menu 1 - 1st submenu 2 - Continuous + confirm
      - if:
          condition:
            lambda: 'return id(menu_current_node) == 8;'
          then:
            homeassistant.service:
              variables:
                x: 'return start + id(rotary_dial).state*step;'
              service: media_player.volume_set
              data_template:
                entity_id: media_player.example_player
                volume_level: '{{ x }}'

#####  END OF CONFIGURATION BLOCK 

interval:
# Screen saver logic
  - interval: 0.2s
    then:
      - lambda: |-
          id(ss_x) += id(ss_vx);
          id(ss_y) += id(ss_vy);
          if(id(ss_x)>37 || id(ss_x)<1) id(ss_vx) *= -1;
          if(id(ss_y)>31 || id(ss_y)<-5) id(ss_vy) *= -1;
          id(wi) = ++id(wi) > 15 ? 0 : id(wi);

i2c:
  sda: ${i2cData}
  scl: ${i2cClock}
  frequency: 200kHz
  scan: True
  id: bus_a

time:
  - platform: homeassistant
    id: ha_time
    
font:
  - file: "SFCompactText.ttf"
    id: big_font
    size: 32
    glyphs: ":0123456789"

  - file: "SFCompactText.ttf"
    id: small_font
    size: 16
    glyphs: ">-:/&!Â°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."

  - file: "SFCompactText.ttf"
    id: tiny_font
    size: 12
    glyphs: ":0123456789Conectig."

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    update_interval: 0.1s
    id: idisplay
    lambda: |-
      if (!id(api_connected).state){
        // Little animation before API is online
        it.printf(64, 0, id(tiny_font), TextAlign::TOP_CENTER, "Connecting...");
        it.filled_circle(64, 40, 20);
        it.filled_circle(64, 40, 15, COLOR_OFF);
        unsigned char wii = floor(id(wi)/2);
        if(wii > 0 && wii < 5) it.filled_rectangle(65, 20, 20, 21, COLOR_OFF);
        if(wii > 1 && wii < 6) it.filled_rectangle(65, 40, 20, 21, COLOR_OFF);
        if(wii > 2 && wii < 7) it.filled_rectangle(44, 40, 21, 21, COLOR_OFF);
        if(wii > 3 && wii < 8) it.filled_rectangle(44, 20, 21, 21, COLOR_OFF);
      } else {
    
      // Screensaver is always node 0
      if(id(menu_current_node)==0) {
        it.strftime(id(ss_x), id(ss_y), id(big_font), "%H:%M", id(ha_time).now());
      }
      else {
      
        // Header time
        it.strftime(0, 6, id(tiny_font), COLOR_ON, TextAlign::CENTER_LEFT, "%H:%M", id(ha_time).now());
        // Header wifi
        for(int i=0; i<5; i++) if(i<id(wifistep).state) it.filled_rectangle(102+i*5,8-i*2,4,i*2+4); else it.rectangle(102+i*5,8-i*2,4,i*2+4);
        // Header menu level
        if(id(menu_level)>0){
        
          // y-ccord start of the level display
          int b = 64 - (4 * id(menu_level));
          for(int i=0; i<id(menu_level); i++) {
          
            // Start of this symbol
            int itb = b + i*8;
            // Top line
            it.line(itb, 2, itb+6, 6);
            // Bottom line
            it.line(itb+6, 6, itb, 10);
            
          };
        }
        // Header menu position
        // y-ccord start of the menu pos display
        int b = 64 - (2 * id(menu_length)[id(menu_parent)[id(menu_level)]]);
        for(int i=0; i<id(menu_length)[id(menu_parent)[id(menu_level)]]; i++) {
          
          // Start of this symbol
          int itb = b + i*4;
          if(id(menu_position)[id(menu_level)] == i) it.filled_rectangle(itb, 61, 3, 3);
          else it.draw_pixel_at(itb+1, 62);
            
        };
        
        
        // Show label
        bool s = !id(menu_set_mode) &&
                (id(menu_functions)[id(menu_current_node)] == 2 || 
                 id(menu_functions)[id(menu_current_node)] == 3 || 
                 id(menu_functions)[id(menu_current_node)] == 4 || 
                 id(menu_functions)[id(menu_current_node)] == 6 );
        it.printf(64, 40, id(small_font), TextAlign::TOP_CENTER, "%s%s", id(menu_labels)[id(menu_current_node)], s ? " >" : "" );
        
        // Show value
        if(id(menu_set_mode)) {
          
          switch(id(menu_functions)[id(menu_current_node)]){
          
            case 3:
            case 6:
              // Value
              it.printf(127, 20, id(small_font), TextAlign::TOP_RIGHT, "%.2f", id(menu_current_value));
              // Setting progressbar, outline rectangle
              it.rectangle(0, 25, 64, 12);
              // Inner fill
              it.filled_rectangle(2, 27, round(id(rotary_dial).state*0.60), 8);
              break;
            case 4:
              // Labels
              it.printf(10, 20, id(small_font), TextAlign::TOP_LEFT, "OFF");
              it.printf(122, 20, id(small_font), TextAlign::TOP_RIGHT, "ON");
              // Switch, outline rectangle
              it.rectangle(52, 25, 24, 12);
              // Inner toggle
              it.filled_rectangle(54 + id(rotary_dial).state*10, 27, 10, 8);

          }

        } else {
        
          // Show value only if Display or Setting
          switch(id(menu_functions)[id(menu_current_node)]){
          
            case 1:
            case 3:
            case 6:
              it.printf(64, 20, id(small_font), TextAlign::TOP_CENTER, "%.2f", id(menu_current_value));
              break;
            case 4:
              it.printf(64, 20, id(small_font), TextAlign::TOP_CENTER, "%s", id(menu_current_value) == 0 ? "OFF" : "ON");
              break;
            case 5: // show button
              it.rectangle(52, 24, 24, 14);
              if(id(rotary_dial_push).state == 0){
                // horizontal shades
                it.line(53, 25, 73, 25);
                it.line(54, 36, 72, 36);
                // vertical shades
                it.line(53, 25, 53, 35);
                it.line(74, 26, 74, 34);
                // edge
                //it.draw_pixel_at(74, 36);

              }
              break;
              
          }
        }
      }
      
      }
          
sensor:
  - platform: rotary_encoder
    id: rotary_dial
    pin_a:
      number: ${encoderPinA}
      inverted: true
      mode: INPUT_PULLUP
    pin_b:
      number: ${encoderPinB}
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - lambda: |-
          unsigned char a;
          if(id(menu_set_mode)) { //if set mode, rotary should go from 0 to according setting

            switch(id(menu_functions)[id(menu_current_node)]){
              case 3: 
              case 6:
                a = id(menu_length)[id(menu_current_node)]; break; // continuous
              case 4: a = 2; break;  // binary
            }

          } else { //if not, it should go to level length

            //get current menu length
            a = id(menu_length)[id(menu_parent)[id(menu_level)]];

          }

          //if rotary is over length, set to length
          if(x >= a) {

            id(rotary_dial).set_value(a-1);
            return a-1;

          }
          else return x;
    resolution: 1
    min_value: 0
    max_value: 100
    on_value:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  condition:
                    # Are we setting or browsing?
                    lambda: 'return id(menu_set_mode);'
                  then:
                   # Change setting only if not in continuous + confirm
                    - if:
                        condition:
                          lambda: 'return !(id(menu_functions)[id(menu_current_node)] == 6);'
                        then:
                          - script.execute: menu_actions
                  else:
                    # Browsing mode, set menu position
                    - lambda: |-
                        //set current node to start of current child + rotary position
                        id(menu_current_node) = id(menu_child)[id(menu_parent)[id(menu_level)]] + x;
                        //set current level position
                        id(menu_position)[id(menu_level)] = x;
                # Update value
              - script.execute: menu_values

  - platform: wifi_signal
    id: wifisignal
    update_interval: 20s
    
  - platform: template
    id: wifistep
    update_interval: 20s
    lambda: |-
      if(isnan(id(wifisignal).state)) return 0;
      else return round((id(wifisignal).state+100)/10);

#####
#####  CONFIGURATION BLOCK HERE
#####

# Sensors from Home Assistant

  - platform: homeassistant
    name: "Example sensor"
    entity_id: sensor.example_sensor
    id: ex_cont
    internal: true
    on_value:
      then:
        # Logic to correctly update menu values
        - script.execute: menu_values
        - if:
            condition:
              lambda: 'return id(menu_set_mode);'
            then:
              - script.execute: menu_set_rotary
        # End of menu values logic

#####  END OF CONFIGURATION BLOCK 

binary_sensor:
  - platform: gpio
    id: rotary_dial_push
    pin:
      number: ${encoderSwitch}
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        - if:
            condition:
              api.connected
            then:
              - if:
                  condition:
                    # Execute continuous setting with confirmation when returning from set mode
                    lambda: 'return id(menu_functions)[id(menu_current_node)] == 6 && id(menu_set_mode) == true;'
                  then:
                     - script.execute: menu_actions

              - if:
                  condition:
                    # Set mode for continuous or binary setting
                    lambda: 'return (id(menu_functions)[id(menu_current_node)] == 3 || id(menu_functions)[id(menu_current_node)] == 4  || id(menu_functions)[id(menu_current_node)] == 6);'
                  then:
                    - lambda: |-
                        //toggle set mode
                        if(id(menu_set_mode)) {
                        
                          id(menu_set_mode) = false;
                          // restore rotary value to position
                          id(rotary_dial).set_value(id(menu_position)[id(menu_level)]);
      
                        } else id(menu_set_mode) = true;
      
              - if:
                  condition:
                    # Button action
                    lambda: 'return id(menu_functions)[id(menu_current_node)] == 5;'
                  then:
                     - script.execute: menu_actions
      
              # If set mode, set rotary
              - if:
                  condition:
                    lambda: 'return id(menu_set_mode);'
                  then:
                    - script.execute: menu_set_rotary

              - if:
                  condition:
                    # Go to submenu. This needs to be last to prevent setting new item and also executing it
                    lambda: 'return id(menu_functions)[id(menu_current_node)] == 2;'
                  then:
                    - lambda: |-
                        //raise level up to max level
                        id(menu_level) = ++id(menu_level) > id(menu_max_level) ? id(menu_max_level) : id(menu_level);
                        //set parent node for new level
                        id(menu_parent)[id(menu_level)] = id(menu_current_node);
                        //set new current node
                        id(menu_current_node) = id(menu_child)[id(menu_parent)[id(menu_level)]];
                        //reset rotary to 0
                        id(rotary_dial).set_value(0);
                        //reset position in current level to 0
                        id(menu_position)[id(menu_level)] = 0;

              # Display entities value for each menu item
              - script.execute: menu_values


  - platform: gpio
    id: secret_switch
    pin:
      number: TX
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        lambda: |-
          if(id(menu_set_mode)) {
          
            id(menu_set_mode) = false;
            id(rotary_dial).set_value(id(menu_position)[id(menu_level)]);
          }
          else {
          
          if(id(menu_level) > 0) { //if we have anywhere to return
          
            //set new current node to current parent
            id(menu_current_node) = id(menu_parent)[id(menu_level)];
            //return to previous level
            --id(menu_level);
            //reset rotary to position for current level
            id(rotary_dial).set_value(id(menu_position)[id(menu_level)]);
          } else {
          
          if(id(menu_level) == 0) { //if we are at level 0, jump to saver
          
            //set new current node to 0
            id(menu_current_node) = 0;
            //reset rotary to 0
            id(rotary_dial).set_value(0);
            //reset menu position for current level to 0
            id(menu_position)[id(menu_level)] = 0;
          } } }

  - platform: template
    id: api_connected

#####
#####  CONFIGURATION BLOCK HERE
#####

  # Binary sensors from HomeAssistant
  - platform: homeassistant
    entity_id: switch.example_switch
    id: ex_bin
    internal: true
    on_state:
      then:
        # Logic to correctly update menu values
        - script.execute: menu_values
        - if:
            condition:
              lambda: 'return id(menu_set_mode);'
            then:
              - script.execute: menu_set_rotary
        # End of menu values logic

#####  END OF CONFIGURATION BLOCK 

